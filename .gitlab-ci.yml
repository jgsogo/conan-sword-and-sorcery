variables:
    PYPI_USER: SECURE
    PYPI_PASSWORD: SECURE

cache:
  paths:
    - .coverage

stages:
  - test
  - coverage
  - deploy
  - cleanup

python_2_7:
   stage: test
   image: python:2.7
   script:
     - apt-get update -qy
     - apt-get install -y python-pip
     - pip install -r tests/requirements.txt
     - python -m unittest discover tests
   except:
     - /^notest/
   artifacts:
     paths:
      - .coverage

python_3_5:
   stage: test
   image: python:3.5
   script:
     - apt-get update -qy
     - apt-get install -y python-pip
     - pip install -r tests/requirements.txt
     - python -m unittest discover tests
   except:
     - /^notest/
   artifacts:
     paths:
      - .coverage

coverage:
  stage: coverage
  script:
    - pip -q install coverage
    - coverage report '--include=conan_sword_and_sorcery/*'
  dependencies:
    - python_2_7
    - python_3_5
  except:
    - /^notest/

deploy_pypi:
  stage: deploy
  script:   # Configure the PyPI credentials, then push the package, and cleanup the creds.
    - echo "[server-login]" >> ~/.pypirc
    - echo "username=" ${PYPI_USER} >> ~/.pypirc
    - echo "password=" ${PYPI_PASSWORD} >> ~/.pypirc
    - python setup.py check sdist bdist upload   # This will fail if your creds are bad.
    - echo "" > ~/.pypirc && rm ~/.pypirc  # If the above fails, this won't run.
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
  except:
    - branches


cleanup_pypirc:
   stage: cleanup
   when: always   # this is important; run even if preceding stages failed.
   script:
    - rm -vf ~/.pypirc  # we don't want to leave these around, but GitLab may clean up anyway.
