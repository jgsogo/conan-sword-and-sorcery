variables:
    PYPI_USER: SECURE
    PYPI_PASSWORD: SECURE

cache:
  paths:
    - .coverage
    - reports

stages:
  - test
  - coverage
  - deploy
  - cleanup

python_2_7:
   stage: test
   image: python:2.7
   script:
     - apt-get update -qy
     - apt-get install -y python-pip
     - pip install -r tests/requirements.txt
     - conan user
     - mkdir ~/.conan/data  # This directory is not generated on install
     - py.test --cov=conan_sword_and_sorcery tests/  # Run with coverage (but do not store)
   except:
     - /^notest/

python_3_6:
   stage: test
   image: python:3.6
   script:
     - apt-get update -qy
     - apt-get install -y python-pip
     - pip install -r tests/requirements.txt
     - conan user
     - mkdir ~/.conan/data  # This directory is not generated on install
     - py.test --cov=conan_sword_and_sorcery --cov-report=html:public/coverage tests/  # Run with coverage
   except:
     - /^notest/
   artifacts:
     paths:
      - .coverage
      - reports

coverage:
  stage: coverage
  image: python:3.6
  script:
    - pip -q install coverage
    - coverage report -m
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  dependencies:
    - python_2_7
    - python_3_6
  except:
    - /^notest/

deploy_pypi:
  stage: deploy
  image: python:3.6
  script:   # Configure the PyPI credentials, then push the package, and cleanup the creds.
    - pip -q install twine
    - rm -rf dist
    - echo "[distutils]" >> ~/.pypirc
    - echo "index-servers =" >> ~/.pypirc
    - echo "    pypi" >> ~/.pypirc
    - echo "" >> ~/.pypirc
    - echo "[pypi]" >> ~/.pypirc
    - echo "${PYPI_REPO}" >> ~/.pypirc
    - echo "${PYPI_USER}" >> ~/.pypirc
    - echo "${PYPI_PASSWORD}" >> ~/.pypirc
    - python3 setup.py check sdist # bdist (copy only source distribution)
    - twine upload -r pypi dist/*  # Uses env variables TWINE_USERNAME and TWINE_PASSWORD
  only:
    - /^v(\d+!)?(\d+)(\.\d+)+([\.\-\_])?((a(lpha)?|b(eta)?|c|r(c|ev)?|pre(view)?)\d*)?(\.?(post|dev)\d*)?$/  # PEP-440 compliant version (with 'v' at the beginning)
  except:
    - branches


cleanup_pypirc:
   stage: cleanup
   when: always   # this is important; run even if preceding stages failed.
   script:
    - rm -vf ~/.pypirc  # we don't want to leave these around, but GitLab may clean up anyway.
   only:
    - /^v(\d+!)?(\d+)(\.\d+)+([\.\-\_])?((a(lpha)?|b(eta)?|c|r(c|ev)?|pre(view)?)\d*)?(\.?(post|dev)\d*)?$/  # PEP-440 compliant version (with 'v' at the beginning)
   except:
    - branches
